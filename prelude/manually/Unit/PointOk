-- #Unit/PointOk : #Unit/Prop #Unit/Point
--------------
\ (AND : #Prop ) ->
\ (pair : 
    forall (aaa : 
        forall(UnitElType : #Type1 ) ->
        forall(UnitElProp : UnitElType -> #Prop ) ->
        forall(UnitEqu : 
            forall(a : UnitElType)->forall(aok : UnitElProp a)->
            forall(b : UnitElType)->forall(bok : UnitElProp b)-> 
            #Prop )->
        forall(UnitEquRefl : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            UnitEqu a aok a aok)->
        forall(UnitEquTrans : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            forall(b : UnitElType)->forall(bok: UnitElProp b)->
            forall(c : UnitElType)->forall(cok: UnitElProp c)->
            UnitEqu a aok b bok -> UnitEqu b bok c cok -> UnitEqu a aok c cok) ->
        forall(UnitEquSym : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            forall(b : UnitElType)->forall(bok: UnitElProp b)->
            UnitEqu a aok b bok -> UnitEqu b bok a aok) ->
        forall(UnitPoint : UnitElType) ->
        forall(UnitPointOk : UnitElProp UnitPoint)->
        UnitElProp (UnitPoint)
    ) -> 
    forall (bbb : 
        forall(XUnitElType : #Type1 ) ->
        forall(XUnitElProp : XUnitElType -> #Prop ) ->
        forall(XUnitEqu : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok : XUnitElProp b)-> #Prop )->
        forall(XUnitEquRefl : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            XUnitEqu a aok a aok)->
        forall(XUnitEquTrans : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok: XUnitElProp b)->
            forall(c : XUnitElType)->forall(cok: XUnitElProp c)->
            XUnitEqu a aok b bok -> XUnitEqu b bok c cok -> XUnitEqu a aok c cok) ->
        forall(XUnitEquSym : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok: XUnitElProp b)->
            XUnitEqu a aok b bok -> XUnitEqu b bok a aok) ->
        forall(XUnitPoint : XUnitElType) ->
        forall(XUnitPointOk : XUnitElProp XUnitPoint)->
        forall(YUnitElType : #Type1 ) ->
        forall(YUnitElProp : YUnitElType -> #Prop ) ->
        forall(YUnitEqu : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok : YUnitElProp b)-> #Prop )->
        forall(YUnitEquRefl : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            YUnitEqu a aok a aok)->
        forall(YUnitEquTrans : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok: YUnitElProp b)->
            forall(c : YUnitElType)->forall(cok: YUnitElProp c)->
            YUnitEqu a aok b bok -> YUnitEqu b bok c cok -> YUnitEqu a aok c cok) ->
        forall(YUnitEquSym : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok: YUnitElProp b)->
            YUnitEqu a aok b bok -> YUnitEqu b bok a aok) ->
        forall(YUnitPoint : YUnitElType) ->
        forall(YUnitPointOk : YUnitElProp YUnitPoint)->
        forall(onElType : XUnitElType -> YUnitElType)->
        forall(onElProp : 
            forall (el : XUnitElType) -> 
            XUnitElProp el -> YUnitElProp (onElType el))->
        forall(onEqu : 
            forall(elA : XUnitElType)->forall(okA : XUnitElProp elA)->
            forall(elB : XUnitElType)->forall(okB : XUnitElProp elB)->
            XUnitEqu elA okA elB okB -> 
            YUnitEqu (onElType elA) (onElProp elA okA) (onElType elB) (onElProp elB okB)) ->
        forall(onPoint : 
            YUnitEqu 
                (onElType XUnitPoint) (onElProp XUnitPoint XUnitPointOk) 
                YUnitPoint YUnitPointOk) ->
        YUnitEqu 
            (onElType 
                (XUnitPoint)) 
            (onElProp 
                (XUnitPoint) 
                (aaa  
                    XUnitElType XUnitElProp XUnitEqu 
                    XUnitEquRefl XUnitEquTrans XUnitEquSym 
                    XUnitPoint XUnitPointOk))
            (YUnitPoint) 
            (aaa  
                YUnitElType YUnitElProp YUnitEqu 
                YUnitEquRefl YUnitEquTrans YUnitEquSym 
                YUnitPoint YUnitPointOk)
    )-> 
    AND)->
pair
    (
        \(UnitElType : #Type1 ) ->
        \(UnitElProp : UnitElType -> #Prop ) ->
        \(UnitEqu : 
            forall(a : UnitElType)->forall(aok : UnitElProp a)->
            forall(b : UnitElType)->forall(bok : UnitElProp b)-> 
            #Prop )->
        \(UnitEquRefl : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            UnitEqu a aok a aok)->
        \(UnitEquTrans : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            forall(b : UnitElType)->forall(bok: UnitElProp b)->
            forall(c : UnitElType)->forall(cok: UnitElProp c)->
            UnitEqu a aok b bok -> UnitEqu b bok c cok -> UnitEqu a aok c cok) ->
        \(UnitEquSym : 
            forall(a : UnitElType)->forall(aok: UnitElProp a)->
            forall(b : UnitElType)->forall(bok: UnitElProp b)->
            UnitEqu a aok b bok -> UnitEqu b bok a aok) ->
        \(UnitPoint : UnitElType) ->
        \(UnitPointOk : UnitElProp UnitPoint)->
        UnitPointOk    
    )
    (
        \(XUnitElType : #Type1 ) ->
        \(XUnitElProp : XUnitElType -> #Prop ) ->
        \(XUnitEqu : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok : XUnitElProp b)-> #Prop )->
        \(XUnitEquRefl : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            XUnitEqu a aok a aok)->
        \(XUnitEquTrans : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok: XUnitElProp b)->
            forall(c : XUnitElType)->forall(cok: XUnitElProp c)->
            XUnitEqu a aok b bok -> XUnitEqu b bok c cok -> XUnitEqu a aok c cok) ->
        \(XUnitEquSym : 
            forall(a : XUnitElType)->forall(aok: XUnitElProp a)->
            forall(b : XUnitElType)->forall(bok: XUnitElProp b)->
            XUnitEqu a aok b bok -> XUnitEqu b bok a aok) ->
        \(XUnitPoint : XUnitElType) ->
        \(XUnitPointOk : XUnitElProp XUnitPoint)->
        \(YUnitElType : #Type1 ) ->
        \(YUnitElProp : YUnitElType -> #Prop ) ->
        \(YUnitEqu : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok : YUnitElProp b)-> #Prop )->
        \(YUnitEquRefl : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            YUnitEqu a aok a aok)->
        \(YUnitEquTrans : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok: YUnitElProp b)->
            forall(c : YUnitElType)->forall(cok: YUnitElProp c)->
            YUnitEqu a aok b bok -> YUnitEqu b bok c cok -> YUnitEqu a aok c cok) ->
        \(YUnitEquSym : 
            forall(a : YUnitElType)->forall(aok: YUnitElProp a)->
            forall(b : YUnitElType)->forall(bok: YUnitElProp b)->
            YUnitEqu a aok b bok -> YUnitEqu b bok a aok) ->
        \(YUnitPoint : YUnitElType) ->
        \(YUnitPointOk : YUnitElProp YUnitPoint)->
        \(onElType : XUnitElType -> YUnitElType)->
        \(onElProp : 
            forall (el : XUnitElType) -> 
            XUnitElProp el -> YUnitElProp (onElType el))->
        \(onEqu : 
            forall(elA : XUnitElType)->forall(okA : XUnitElProp elA)->
            forall(elB : XUnitElType)->forall(okB : XUnitElProp elB)->
            XUnitEqu elA okA elB okB -> 
            YUnitEqu (onElType elA) (onElProp elA okA) (onElType elB) (onElProp elB okB)) ->
        \(onPoint : 
            YUnitEqu 
                (onElType XUnitPoint) (onElProp XUnitPoint XUnitPointOk) 
                YUnitPoint YUnitPointOk) ->
        onPoint
    )