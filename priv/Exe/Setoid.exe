
   record PointedSetoid :=
          (ob:  record Ob :=
                       (elem: *)
                       (eq: Equ elem)
                       (point: elem))
          (hom: λ (X,Y: ob) →
                record Hom :=
                       (elem: X.elem → Y.elem)
                       (eq: ∀ (x1, x2: X.elem) → X.eq x1 x2 → Y.eq (elem x1) (elem x2))
                       (point: Y.eq (elem X.point) Y.point))

   --------------------------------------------------------------

    record Ob: * :=
           (elem: *)
           (eq: Equ elem)
           (point: elem)

    record Hom (X,Y: Ob): * :=
           (elem: X.elem → Y.elem)
           (eq: ∀ (x1, x2: X.elem) → X.eq x1 x2 → Y.eq (elem x1) (elem x2))
           (point: Y.eq (elem X.point) Y.point)

    record PointedSetoid :=
           (ob: Ob)
           (hom: λ (X,Y: ob) → Hom (X,Y))

   -------------------------------------------------------------


   -- в первом варианте equ реализован в виде индуктивного типа с одним конструктором

     enum equ (e: *): * := (mk: e → e → equ e)
   record setoid (e: *) := (refl:  equ.mk e e)
                           (trans: equ.mk e1 e2 → equ.mk e2 e3 → equ.mk e1 e3)
                           (sym:   equ.mk e1 e2 → equ.mk e2 e1)

   -- второй вариант на рекордах без наследования, через аксесоры

   record equ (e: *): * := (rel: e → e → Prop)
   record setoid (e: *) := (refl:  equ.rel e e)
                           (trans: equ.rel e1 e2 → equ.rel e2 e3 → equ.rel e1 e3)
                           (sym:   equ.rel e1 e2 → equ.rel e2 e1)

   -- насдедственный полиморфизм на рекордах

   record equ (e: *): * := (rel: e → e → Prop)
   record setoid (e: *) extend equ
                        := (refl:  rel e e)
                           (trans: rel e1 e2 → rel e2 e3 → rel e1 e3)
                           (sym:   rel e1 e2 → rel e2 e1)

