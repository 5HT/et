-- arg P, mk
λ (P.el : #Data/Empty/Predicate/=El) →
λ (P.ok : #Data/Empty/Predicate/=Ok P.el) →

-- res
#Data/Empty/EndoSet/=Trans
    (#Poset/Mul/=el
            #Data/Empty/Init/=Carrier/=El
            #Data/Empty/Init/=Carrier/=To
            #Data/Empty/Init/=Carrier/=Trans
            (#Data/Empty/Sigma/=Carrier/=El P.el P.ok)
            (#Data/Empty/Sigma/=Carrier/=To P.el P.ok)
            (#Data/Empty/Sigma/=Carrier/=Trans P.el P.ok)
            #Data/Empty/Init/=Carrier/=El
            #Data/Empty/Init/=Carrier/=To
            #Data/Empty/Init/=Carrier/=Trans
            (#Data/Empty/SInj/=el P.el P.ok)
            (#Data/Empty/SInj/=ok.equ P.el P.ok)
            (#Data/Empty/recurP/forOb/=el P.el P.ok)
            (#Data/Empty/recurP/forOb/=ok.equ P.el P.ok))
        (#Data/Empty/recur/forOb/=el
            #Data/Empty/Init/=Carrier/=El
            #Data/Empty/Init/=Carrier/=To
            #Data/Empty/Init/=Carrier/=Trans)
        #Data/Empty/IId/=el
        (#Data/Empty/recurP/forHom.equ P.el P.ok)
        #Data/Empty/recur/forId/==equ
