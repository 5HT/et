-- arg P, mk
λ (P.el : #Data/Bool/Predicate/=El) →
λ (P.ok : #Data/Bool/Predicate/=Ok P.el) →
λ (true : P.el #Data/Bool/Init/=True/=el) →
λ (false : P.el #Data/Bool/Init/=False/=el) →

-- res
#Data/Bool/EndoSet/=Trans
    --  (Poset.Mul.onEl Init.Carrier (SmallSigmaSet Init.Carrier P) Init.Carrier
    --      (Pred2Sub.i Init.Carrier P) (recurP.forOb P mk))
    (#Poset/Mul/=el
            #Data/Bool/Init/=Carrier/=El
            #Data/Bool/Init/=Carrier/=To
            #Data/Bool/Init/=Carrier/=Trans
            (#Data/Bool/Sigma/=Carrier/=El P.el P.ok true false)
            (#Data/Bool/Sigma/=Carrier/=To P.el P.ok true false)
            (#Data/Bool/Sigma/=Carrier/=Trans P.el P.ok true false)
            #Data/Bool/Init/=Carrier/=El
            #Data/Bool/Init/=Carrier/=To
            #Data/Bool/Init/=Carrier/=Trans
            (#Data/Bool/SInj/=el P.el P.ok true false)
            (#Data/Bool/SInj/=ok.equ P.el P.ok true false)
            (#Data/Bool/recurP/forOb/=el P.el P.ok true false)
            (#Data/Bool/recurP/forOb/=ok.equ P.el P.ok true false))
    --        (recur.forOb.el Init)
        (#Data/Bool/recur/forOb/=el
            #Data/Bool/Init/=Carrier/=El
            #Data/Bool/Init/=Carrier/=To
            #Data/Bool/Init/=Carrier/=Trans
            #Data/Bool/Init/=True/=el
            #Data/Bool/Init/=True/=ok
            #Data/Bool/Init/=False/=el
            #Data/Bool/Init/=False/=ok)
    --        IId
        #Data/Bool/IId/=el
    --        (recurP.forHom.equ P mk)
        (#Data/Bool/recurP/forHom.equ P.el P.ok true false)
    --        recur.forId
        #Data/Bool/recur/forId/==equ
