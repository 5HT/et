-- arg P, mk
λ (P.el : #Data/Bool/Predicate/=El) →
λ (P.ok : #Data/Bool/Predicate/=Ok P.el) →
λ (true : P.el #Data/Bool/Init/=True/=el) →
λ (false : P.el #Data/Bool/Init/=False/=el) →

-- res
#Data/Bool/recur/forHom/==equ
    (#Data/Bool/Sigma/=Carrier/=El P.el P.ok true false)
    (#Data/Bool/Sigma/=Carrier/=To P.el P.ok true false)
    (#Data/Bool/Sigma/=Carrier/=Trans P.el P.ok true false)
    (#Data/Bool/Sigma/=True/=el P.el P.ok true false)
    (#Data/Bool/Sigma/=True/=ok P.el P.ok true false)
    (#Data/Bool/Sigma/=False/=el P.el P.ok true false)
    (#Data/Bool/Sigma/=False/=ok P.el P.ok true false)
    #Data/Bool/Init/=Carrier/=El
    #Data/Bool/Init/=Carrier/=To
    #Data/Bool/Init/=Carrier/=Trans
    #Data/Bool/Init/=True/=el
    #Data/Bool/Init/=True/=ok
    #Data/Bool/Init/=False/=el
    #Data/Bool/Init/=False/=ok
    (#Data/Bool/SInj/=el P.el P.ok true false)
    (#Data/Bool/SInj/=ok P.el P.ok true false)
