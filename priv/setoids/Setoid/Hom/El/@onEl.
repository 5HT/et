-- #Setoid/Hom/El/@onEl. : ∀(A, B: #Setoid/Ob/)→ #Setoid/Ob/@El. (#Setoid/Hom/=El.onEl A B)

-- arg A
λ (A.El : #Setoid/Ob/@El) →
λ (A.El. : #Setoid/Ob/@El. A.El) →
λ (A.Equ : #Setoid/Ob/@Equ A.El A.El.) →
λ (A.Cong : #Setoid/Ob/@Cong A.El A.El. A.Equ) →
λ (A.Refl : #Setoid/Ob/@Refl A.El A.El. A.Equ) →
λ (A.Trans : #Setoid/Ob/@Trans A.El A.El. A.Equ) →
λ (A.Sym : #Setoid/Ob/@Sym A.El A.El. A.Equ) →

-- arg B
λ (B.El : #Setoid/Ob/@El) →
λ (B.El. : #Setoid/Ob/@El. B.El) →
λ (B.Equ : #Setoid/Ob/@Equ B.El B.El.) →
λ (B.Cong : #Setoid/Ob/@Cong B.El B.El. B.Equ) →
λ (B.Refl : #Setoid/Ob/@Refl B.El B.El. B.Equ) →
λ (B.Trans : #Setoid/Ob/@Trans B.El B.El. B.Equ) →
λ (B.Sym : #Setoid/Ob/@Sym B.El B.El. B.Equ) →

-- Ok arg
λ (onEl : #Setoid/Hom/El/@onEl
    A.El A.El. A.Equ A.Cong A.Refl A.Trans A.Sym
    B.El B.El. B.Equ B.Cong B.Refl B.Trans B.Sym) →

-- res
∀ (a : A.El) → ∀ (a. : A.El. a) → B.El. (onEl a a.)
