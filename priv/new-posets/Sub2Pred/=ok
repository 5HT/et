--(B : Poset.Ob.{u, p}) (S : SubsetType.{u, p} B)

-- arg B
λ (B.El : #Poset/Ob/@El) →
λ (B.To : #Poset/Ob/@To B.El) →
λ (B.Trans : #Poset/Ob/@Trans B.El B.To) →

-- arg S
λ (S.A.El : #SubsetType/@A/@El
    B.El B.To B.Trans) →
λ (S.A.To : #SubsetType/@A/@To
    B.El B.To B.Trans
    S.A.El) →
λ (S.A.Trans : #SubsetType/@A/@Trans
    B.El B.To B.Trans
    S.A.El S.A.To) →
λ (S.i.el : #SubsetType/@i/@el
    B.El B.To B.Trans
    S.A.El S.A.To S.A.Trans) →
λ (S.i.ok : #SubsetType/@i/@ok
    B.El B.To B.Trans
    S.A.El S.A.To S.A.Trans
    S.i.el) →
λ (S.uniq : #SubsetType/@uniq
    B.El B.To B.Trans
    S.A.El S.A.To S.A.Trans
    S.i.el S.i.ok) →

-- predicate /To/ arg
λ (b1.el : B.El) → λ (b1.ok : #@Ok B.El B.To b1.el) →
λ (b2.el : B.El) → λ (b2.ok : #@Ok B.El B.To b2.el) →
λ (bto12 : B.To b1.el b2.el) →

-- (#Sub2Pred/=el ... b1) → (#Sub2Pred/=el ... b2)
λ (pair : #Sub2Pred/=el
    B.El B.To B.Trans
    S.A.El S.A.To S.A.Trans
    S.i.el S.i.ok S.uniq
    b1.el) →

pair
    (#Prop/Exists/@
        (S.A.El)
        (λ (a.el : S.A.El) →
            B.To (S.i.el a.el) b2.el))
    (
        λ (xa : S.A.El) →
        λ (xto : B.To (S.i.el xa) b1.el) →
    #Prop/Exists/Intro
        (S.A.El)
        (λ (a.el : S.A.El) →
            B.To (S.i.el a.el) b2.el)
        xa
        (B.Trans (S.i.el xa) b1.el b2.el xto bto12)
    )
